
from datetime import datetime, timedelta
from typing import Optional
from fastapi import Depends, HTTPException, status
from fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm
from jose import JWTError, jwt
from passlib.context import CryptContext
from pydantic import BaseModel


# generated by `openssl rand -hex 32`
SECRET_KEY = "6c84b0993a99573d6ae1672c065cef7eb19bae7beafab72b6136c8b277515b2f"
ALGORITHM = "HS256"

# only allow one user
allowed_users = {
    "multi-server": {
        "username": "multi-server",
        "hashed_password": "$2b$12$MkTKb/7CV51YlozJGRZAxuR4u9Ui0.hsICghylY9nFiveRx8Ebboy",
    }
}


class Token(BaseModel):
    access_token: str
    token_type: str
    success: Optional[int]


class AuthUser(BaseModel):
    username: str
    email: Optional[str] = None
    hashed_password: str


pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")


def get_auth_user(allowed_users, username: str):
    if username in allowed_users:
        user_dict = allowed_users[username]
        return AuthUser(**user_dict)


def authenticate_user(allowed_users, username: str, password: str):
    user = get_auth_user(allowed_users, username)
    if not user:
        return False
    if not pwd_context.verify(password, user.hashed_password):
        return False
    return user


def create_access_token(data: dict, expires_delta: Optional[timedelta] = None):
    to_encode = data.copy()
    if expires_delta:
        expire = datetime.utcnow() + expires_delta
        to_encode.update({"exp": expire})
    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)
    return encoded_jwt


def validate_user_token(token: str = Depends(oauth2_scheme)):
    credentials_exception = HTTPException(
        status_code=status.HTTP_401_UNAUTHORIZED,
        detail="Could not validate credentials",
        headers={"WWW-Authenticate": "Bearer"},
    )
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        username: str = payload.get("sub")
        if username is None:
            raise credentials_exception
    except JWTError:
        raise credentials_exception
    user = get_auth_user(allowed_users, username=username)
    if user is None:
        raise credentials_exception
    return user

